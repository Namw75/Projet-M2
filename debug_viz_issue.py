import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

def debug_viz_issue():
    """Diagnostique le probl√®me avec la visualisation des secteurs d'activit√©"""
    
    print("üîç Diagnostic du probl√®me de visualisation")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect('bdd_clients.db')
        
        # 1. V√©rifier les donn√©es brutes
        print("üìä Donn√©es brutes dans 'Secteur d'activit√©' :")
        raw_data = pd.read_sql_query(
            "SELECT \"Secteur d'activit√©\", COUNT(*) as count FROM contacts GROUP BY \"Secteur d'activit√©\" ORDER BY count DESC",
            conn
        )
        print(raw_data.to_string(index=False))
        
        # 2. V√©rifier les valeurs NULL
        null_count = pd.read_sql_query(
            "SELECT COUNT(*) as count FROM contacts WHERE \"Secteur d'activit√©\" IS NULL",
            conn
        )
        print(f"\n‚ùå Contacts avec secteur NULL : {null_count['count'].iloc[0]}")
        
        # 3. Tester la requ√™te qui devrait fonctionner
        print("\nüß™ Test de la requ√™te corrig√©e :")
        query = """
        SELECT 
            COALESCE("Secteur d'activit√©", 'Non sp√©cifi√©') as "Secteur d'activit√©",
            COUNT(*) as "Nombre_de_contacts"
        FROM contacts 
        GROUP BY "Secteur d'activit√©" 
        ORDER BY "Nombre_de_contacts" DESC 
        LIMIT 5
        """
        
        df = pd.read_sql_query(query, conn)
        print("‚úÖ Donn√©es nettoy√©es :")
        print(df.to_string(index=False))
        
        # 4. Tester la visualisation
        print("\nüé® Test de la visualisation :")
        if len(df) > 0:
            # Nettoyer les donn√©es pour la visualisation
            df_clean = df.copy()
            df_clean = df_clean.fillna('Non sp√©cifi√©')  # Remplacer les NaN restants
            
            # Cr√©er le graphique
            colors = ['#ff1744', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5']
            
            plt.figure(figsize=(12, 6))
            bars = plt.bar(df_clean['Secteur d\'activit√©'], df_clean['Nombre_de_contacts'], color=colors[:len(df_clean)])
            
            plt.xlabel('Secteur d\'activit√©', fontsize=12)
            plt.ylabel('Nombre de contacts', fontsize=12)
            plt.title('R√©partition des contacts par secteur d\'activit√© (Top 5)', fontsize=14, fontweight='bold')
            
            # Ajouter les valeurs sur les barres
            for bar in bars:
                height = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{int(height)}', ha='center', va='bottom', fontweight='bold')
            
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            
            # Sauvegarder pour v√©rifier
            plt.savefig('test_viz_debug.png', dpi=150, bbox_inches='tight')
            plt.close()
            
            print("‚úÖ Graphique g√©n√©r√© et sauv√© dans 'test_viz_debug.png'")
        else:
            print("‚ùå Aucune donn√©e √† visualiser")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_viz_issue() 